const test = require('tape')
const game = require('../lib/game')

const visualizeBalls = balls => {
  const board = {}
  for (let i = 0; i < 7; i++) {
    board[i] = {}
    for (let j = -2; j < 7; j++) {
      board[i][j] = '.'
    }
  }
  balls.forEach(d => {
    board[d.x][d.y] = d.type
  })

  var output = ''
  for (let j = -2; j < 7; j++) {
    for (let i = 0; i < 7; i++) {
      output += board[i][j]
    }
    output += '\n'
  }
  return output.trim()
}

const compareBoard = (t, board, game, msg) => {
  if (board === 'gameover') {
    t.deepEqual(game.gameover(), true, `${msg} is gameover`)
    return
  }
  const output = visualizeBalls(game.balls()).split('\n')
  t.deepEqual(output, board.trim().split('\n'), msg)
}

const testCommands = t => (commands, board, initBoard) => {
  const g = game(l => l, cb => cb(), initBoard)
  commands.split('').forEach(command => {
    switch (command) {
      case 'l':
        return g.moveDotsLeft()
      case 'r':
        return g.moveDotsRight()
      case 'u':
        return g.rotateDots()
      case 'd':
        return g.pushDots()
    }
  })
  compareBoard(t, board, g, `commands '${commands}'`)
}

test('it has balls', t => {
  t.deepEqual(game().balls(), [
    { x: 4, y: -1, key: 0, type: 1, outside: true },
    { x: 5, y: -1, key: 1, type: 0, outside: true }
  ])
  t.end()
})

test('it has colors', t => {
  t.deepEqual(game().colors(), [
    '#4CDC00',
    '#FDD401',
    '#DB7D1B',
    '#DD2C2C',
    '#EE519F',
    '#AC32AF',
    '#314FFF',
    '#0EC5EC',
    '#131313',
    '#E9E9E9'
  ])
  t.end()
})

test('it calculates score', t => {
  const g = game(l => l, cb => cb())
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()

  t.deepEqual(g.score(), 75)
  t.end()
})

test('it calculates highscore', t => {
  const g = game(l => l, cb => cb())
  g.setHighScore(50)
  t.deepEqual(g.highScore(), 50)

  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()

  t.deepEqual(g.highScore(), 75)
  t.end()
})

test('it levels up', t => {
  const g = game(l => l, cb => cb())
  t.deepEqual(g.level(), 2)

  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()
  g.pushDots()

  t.deepEqual(g.level(), 3)
  t.end()
})

test('it executes commands correctly', t => {
  const executeCommands = testCommands(t)

  executeCommands(
    '',
    `
.......
....10.
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'l',
    `
.......
...10..
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'lllllllll',
    `
.......
10.....
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'llllllll',
    `
.......
10.....
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'r',
    `
.......
.....10
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'rr',
    `
.......
.....10
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'u',
    `
.....1.
.....0.
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'uu',
    `
.......
....01.
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'uuu',
    `
.....0.
.....1.
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'd',
    `
.......
....22.
.......
.......
.......
.......
.......
.......
....10.
`
  )

  executeCommands(
    'dd',
    `
.......
....22.
.......
.......
.......
.......
.......
....22.
....10.
`
  )

  executeCommands(
    'ddd',
    `
.......
....22.
.......
.......
.......
.......
.......
....3..
....10.
`
  )

  executeCommands(
    'dddd',
    `
.......
....22.
.......
.......
.......
.......
....2..
....32.
....10.
`
  )

  executeCommands(
    'ddddd',
    `
.......
....22.
.......
.......
.......
.......
.......
....33.
....10.
`
  )

  executeCommands(
    'ddddddd',
    `
.......
....22.
.......
.......
.......
.......
.......
....4..
....10.
`
  )

  executeCommands(
    'dddddlld',
    `
.......
....22.
.......
.......
.......
.......
.......
....33.
..2210.
`
  )

  executeCommands(
    'dddddlldrd',
    `
.......
....22.
.......
.......
.......
.......
.....2.
....33.
..22102
`
  )

  executeCommands(
    'dddddlldrdllul',
    `
..2....
..2....
.......
.......
.......
.......
.....2.
....33.
..22102
`
  )

  executeCommands(
    'dddddlldrdlluld',
    `
.......
....22.
.......
.......
.......
.......
.....2.
....33.
..3.102
`
  )

  executeCommands(
    'ulllll',
    `
1......
0......
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'ulllllu',
    `
.......
01.....
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'urrrrrru',
    `
.......
.....01
.......
.......
.......
.......
.......
.......
.......
`
  )

  executeCommands(
    'ud',
    `gameover`,
    `
.....0.
.....3.
.....3.
.....2.
.....2.
....33.
..3.102
`.trim()
  )


  t.end()
})

test('can init from board', t => {
  const g = game(
    null,
    null,
    `
.......
.......
.......
.......
.....2.
....33.
..3.102
  `.trim()
  )

  compareBoard(t, `
.......
....10.
.......
.......
.......
.......
.....2.
....33.
..3.102
  `, g)
  t.end()
})

